{"version":3,"sources":["scripts/main.js"],"names":["messageStart","document","querySelector","messageLose","messageWin","gameScore","button","table","size","score","board","hasEmptyCell","r","includes","getRandomNumber","num","Math","random","floor","c","updateCells","setGame","classList","replace","add","innerText","hasBoardChanged","currentBoard","boardCopy","loseGame","currentCell","rows","cells","value","remove","slide","row","newRow","filter","el","i","isFinite","length","push","slideLeft","slideRight","reverse","slideUp","slideDown","addEventListener","evnt","map","arr","slice","preventDefault","code"],"mappings":"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","file":"main.0c328edf.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\nconst button = document.querySelector('button');\nconst table = document.querySelector('tbody');\nconst size = 4;\n\nlet score = 0;\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nbutton.addEventListener('click', setGame);\n\nfunction hasEmptyCell() {\n  for (let r = 0; r < size; r++) {\n    if (board[r].includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getRandomNumber() {\n  const num = Math.random() < 0.1 ? 4 : 2;\n\n  while (hasEmptyCell()) {\n    const r = Math.floor(Math.random() * size);\n    const c = Math.floor(Math.random() * size);\n\n    if (board[r][c] === 0) {\n      board[r][c] = num;\n      break;\n    }\n  }\n\n  updateCells();\n}\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n\n  button.classList.replace('start', 'restart');\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  button.innerText = 'Restart';\n\n  getRandomNumber();\n  getRandomNumber();\n}\n\ndocument.addEventListener('keyup', evnt => {\n  const boardCopy = board.map(arr => arr.slice());\n\n  evnt.preventDefault();\n\n  switch (evnt.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      break;\n\n    case 'ArrowUp':\n      slideUp();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      break;\n  }\n\n  if (hasBoardChanged(board, boardCopy)) {\n    getRandomNumber();\n  }\n\n  updateCells();\n});\n\nfunction hasBoardChanged(currentBoard, boardCopy) {\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      if (currentBoard[r][c] !== boardCopy[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction loseGame() {\n  if (hasEmptyCell()) {\n    return false;\n  }\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size - 1; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < size - 1; r++) {\n    for (let c = 0; c < size; c++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction updateCells() {\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      const currentCell = table.rows[r].cells[c];\n      const value = board[r][c];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field-cell');\n\n      if (value > 0) {\n        currentCell.innerText = value;\n        currentCell.classList.add(`field-cell--${value}`);\n      }\n\n      if (value === 2048) {\n        messageWin.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n        button.innerText = 'Start';\n      }\n    }\n  }\n\n  gameScore.innerText = score;\n\n  if (loseGame()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction slide(row) {\n  let newRow = row.filter(el => el !== 0);\n\n  for (let i = 0; i < size - 1; i++) {\n    if (newRow[i] === newRow[i + 1] && isFinite(newRow[i])) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = newRow.filter(el => el !== 0);\n\n  while (newRow.length < size) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < size; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < size; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    board[r] = row;\n  }\n}\n\nfunction slideUp() {\n  for (let c = 0; c < size; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < size; r++) {\n      board[r][c] = row[r];\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < size; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < size; r++) {\n      board[r][c] = row[r];\n    }\n  }\n}\n"]}